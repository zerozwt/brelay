package client

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MsgLoginReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MsgLoginReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "id"
	err = en.Append(0x81, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MsgLoginReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "id"
	o = append(o, 0x81, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.ID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgLoginReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MsgLoginReq) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgLoginRsp) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sid":
			z.SubscriberID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "SubscriberID")
				return
			}
		case "sec":
			z.SubscriberSecret, err = dc.ReadBytes(z.SubscriberSecret)
			if err != nil {
				err = msgp.WrapError(err, "SubscriberSecret")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgLoginRsp) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "sid"
	err = en.Append(0x82, 0xa3, 0x73, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.SubscriberID)
	if err != nil {
		err = msgp.WrapError(err, "SubscriberID")
		return
	}
	// write "sec"
	err = en.Append(0xa3, 0x73, 0x65, 0x63)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SubscriberSecret)
	if err != nil {
		err = msgp.WrapError(err, "SubscriberSecret")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MsgLoginRsp) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "sid"
	o = append(o, 0x82, 0xa3, 0x73, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.SubscriberID)
	// string "sec"
	o = append(o, 0xa3, 0x73, 0x65, 0x63)
	o = msgp.AppendBytes(o, z.SubscriberSecret)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgLoginRsp) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sid":
			z.SubscriberID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SubscriberID")
				return
			}
		case "sec":
			z.SubscriberSecret, bts, err = msgp.ReadBytesBytes(bts, z.SubscriberSecret)
			if err != nil {
				err = msgp.WrapError(err, "SubscriberSecret")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgLoginRsp) Msgsize() (s int) {
	s = 1 + 4 + msgp.Uint32Size + 4 + msgp.BytesPrefixSize + len(z.SubscriberSecret)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgLogoutReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sid":
			z.SubscriberID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "SubscriberID")
				return
			}
		case "sec":
			z.SubscriberSecret, err = dc.ReadBytes(z.SubscriberSecret)
			if err != nil {
				err = msgp.WrapError(err, "SubscriberSecret")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgLogoutReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "sid"
	err = en.Append(0x82, 0xa3, 0x73, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.SubscriberID)
	if err != nil {
		err = msgp.WrapError(err, "SubscriberID")
		return
	}
	// write "sec"
	err = en.Append(0xa3, 0x73, 0x65, 0x63)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SubscriberSecret)
	if err != nil {
		err = msgp.WrapError(err, "SubscriberSecret")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MsgLogoutReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "sid"
	o = append(o, 0x82, 0xa3, 0x73, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.SubscriberID)
	// string "sec"
	o = append(o, 0xa3, 0x73, 0x65, 0x63)
	o = msgp.AppendBytes(o, z.SubscriberSecret)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgLogoutReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sid":
			z.SubscriberID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SubscriberID")
				return
			}
		case "sec":
			z.SubscriberSecret, bts, err = msgp.ReadBytesBytes(bts, z.SubscriberSecret)
			if err != nil {
				err = msgp.WrapError(err, "SubscriberSecret")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgLogoutReq) Msgsize() (s int) {
	s = 1 + 4 + msgp.Uint32Size + 4 + msgp.BytesPrefixSize + len(z.SubscriberSecret)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgLogoutRsp) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ok":
			z.Ok, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Ok")
				return
			}
		case "msg":
			z.Msg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MsgLogoutRsp) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ok"
	err = en.Append(0x82, 0xa2, 0x6f, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Ok)
	if err != nil {
		err = msgp.WrapError(err, "Ok")
		return
	}
	// write "msg"
	err = en.Append(0xa3, 0x6d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Msg)
	if err != nil {
		err = msgp.WrapError(err, "Msg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MsgLogoutRsp) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ok"
	o = append(o, 0x82, 0xa2, 0x6f, 0x6b)
	o = msgp.AppendBool(o, z.Ok)
	// string "msg"
	o = append(o, 0xa3, 0x6d, 0x73, 0x67)
	o = msgp.AppendString(o, z.Msg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgLogoutRsp) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ok":
			z.Ok, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ok")
				return
			}
		case "msg":
			z.Msg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MsgLogoutRsp) Msgsize() (s int) {
	s = 1 + 3 + msgp.BoolSize + 4 + msgp.StringPrefixSize + len(z.Msg)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgSubscribeBatch) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "msgs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Msgs")
				return
			}
			if cap(z.Msgs) >= int(zb0002) {
				z.Msgs = (z.Msgs)[:zb0002]
			} else {
				z.Msgs = make([]MsgSubscribeData, zb0002)
			}
			for za0001 := range z.Msgs {
				err = z.Msgs[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Msgs", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgSubscribeBatch) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "msgs"
	err = en.Append(0x81, 0xa4, 0x6d, 0x73, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Msgs)))
	if err != nil {
		err = msgp.WrapError(err, "Msgs")
		return
	}
	for za0001 := range z.Msgs {
		err = z.Msgs[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Msgs", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MsgSubscribeBatch) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "msgs"
	o = append(o, 0x81, 0xa4, 0x6d, 0x73, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Msgs)))
	for za0001 := range z.Msgs {
		o, err = z.Msgs[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Msgs", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgSubscribeBatch) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "msgs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Msgs")
				return
			}
			if cap(z.Msgs) >= int(zb0002) {
				z.Msgs = (z.Msgs)[:zb0002]
			} else {
				z.Msgs = make([]MsgSubscribeData, zb0002)
			}
			for za0001 := range z.Msgs {
				bts, err = z.Msgs[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Msgs", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgSubscribeBatch) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Msgs {
		s += z.Msgs[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgSubscribeData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "room":
			z.RoomID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RoomID")
				return
			}
		case "type":
			z.MsgType, err = dc.ReadByte()
			if err != nil {
				err = msgp.WrapError(err, "MsgType")
				return
			}
		case "cmd":
			z.Cmd, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Cmd")
				return
			}
		case "data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgSubscribeData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "room"
	err = en.Append(0x84, 0xa4, 0x72, 0x6f, 0x6f, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RoomID)
	if err != nil {
		err = msgp.WrapError(err, "RoomID")
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteByte(z.MsgType)
	if err != nil {
		err = msgp.WrapError(err, "MsgType")
		return
	}
	// write "cmd"
	err = en.Append(0xa3, 0x63, 0x6d, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Cmd)
	if err != nil {
		err = msgp.WrapError(err, "Cmd")
		return
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MsgSubscribeData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "room"
	o = append(o, 0x84, 0xa4, 0x72, 0x6f, 0x6f, 0x6d)
	o = msgp.AppendInt(o, z.RoomID)
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendByte(o, z.MsgType)
	// string "cmd"
	o = append(o, 0xa3, 0x63, 0x6d, 0x64)
	o = msgp.AppendString(o, z.Cmd)
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgSubscribeData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "room":
			z.RoomID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RoomID")
				return
			}
		case "type":
			z.MsgType, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MsgType")
				return
			}
		case "cmd":
			z.Cmd, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cmd")
				return
			}
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgSubscribeData) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 5 + msgp.ByteSize + 4 + msgp.StringPrefixSize + len(z.Cmd) + 5 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgSubscribeReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sid":
			z.SubscriberID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "SubscriberID")
				return
			}
		case "sec":
			z.SubscriberSecret, err = dc.ReadBytes(z.SubscriberSecret)
			if err != nil {
				err = msgp.WrapError(err, "SubscriberSecret")
				return
			}
		case "rooms":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Rooms")
				return
			}
			if cap(z.Rooms) >= int(zb0002) {
				z.Rooms = (z.Rooms)[:zb0002]
			} else {
				z.Rooms = make([]MsgSubscribeRoom, zb0002)
			}
			for za0001 := range z.Rooms {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Rooms", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Rooms", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "room":
						z.Rooms[za0001].RoomID, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Rooms", za0001, "RoomID")
							return
						}
					case "cmds":
						var zb0004 uint32
						zb0004, err = dc.ReadArrayHeader()
						if err != nil {
							err = msgp.WrapError(err, "Rooms", za0001, "Cmds")
							return
						}
						if cap(z.Rooms[za0001].Cmds) >= int(zb0004) {
							z.Rooms[za0001].Cmds = (z.Rooms[za0001].Cmds)[:zb0004]
						} else {
							z.Rooms[za0001].Cmds = make([]string, zb0004)
						}
						for za0002 := range z.Rooms[za0001].Cmds {
							z.Rooms[za0001].Cmds[za0002], err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "Rooms", za0001, "Cmds", za0002)
								return
							}
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Rooms", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgSubscribeReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "sid"
	err = en.Append(0x83, 0xa3, 0x73, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.SubscriberID)
	if err != nil {
		err = msgp.WrapError(err, "SubscriberID")
		return
	}
	// write "sec"
	err = en.Append(0xa3, 0x73, 0x65, 0x63)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.SubscriberSecret)
	if err != nil {
		err = msgp.WrapError(err, "SubscriberSecret")
		return
	}
	// write "rooms"
	err = en.Append(0xa5, 0x72, 0x6f, 0x6f, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Rooms)))
	if err != nil {
		err = msgp.WrapError(err, "Rooms")
		return
	}
	for za0001 := range z.Rooms {
		// map header, size 2
		// write "room"
		err = en.Append(0x82, 0xa4, 0x72, 0x6f, 0x6f, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Rooms[za0001].RoomID)
		if err != nil {
			err = msgp.WrapError(err, "Rooms", za0001, "RoomID")
			return
		}
		// write "cmds"
		err = en.Append(0xa4, 0x63, 0x6d, 0x64, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Rooms[za0001].Cmds)))
		if err != nil {
			err = msgp.WrapError(err, "Rooms", za0001, "Cmds")
			return
		}
		for za0002 := range z.Rooms[za0001].Cmds {
			err = en.WriteString(z.Rooms[za0001].Cmds[za0002])
			if err != nil {
				err = msgp.WrapError(err, "Rooms", za0001, "Cmds", za0002)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MsgSubscribeReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "sid"
	o = append(o, 0x83, 0xa3, 0x73, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.SubscriberID)
	// string "sec"
	o = append(o, 0xa3, 0x73, 0x65, 0x63)
	o = msgp.AppendBytes(o, z.SubscriberSecret)
	// string "rooms"
	o = append(o, 0xa5, 0x72, 0x6f, 0x6f, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Rooms)))
	for za0001 := range z.Rooms {
		// map header, size 2
		// string "room"
		o = append(o, 0x82, 0xa4, 0x72, 0x6f, 0x6f, 0x6d)
		o = msgp.AppendInt(o, z.Rooms[za0001].RoomID)
		// string "cmds"
		o = append(o, 0xa4, 0x63, 0x6d, 0x64, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Rooms[za0001].Cmds)))
		for za0002 := range z.Rooms[za0001].Cmds {
			o = msgp.AppendString(o, z.Rooms[za0001].Cmds[za0002])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgSubscribeReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sid":
			z.SubscriberID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SubscriberID")
				return
			}
		case "sec":
			z.SubscriberSecret, bts, err = msgp.ReadBytesBytes(bts, z.SubscriberSecret)
			if err != nil {
				err = msgp.WrapError(err, "SubscriberSecret")
				return
			}
		case "rooms":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rooms")
				return
			}
			if cap(z.Rooms) >= int(zb0002) {
				z.Rooms = (z.Rooms)[:zb0002]
			} else {
				z.Rooms = make([]MsgSubscribeRoom, zb0002)
			}
			for za0001 := range z.Rooms {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Rooms", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Rooms", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "room":
						z.Rooms[za0001].RoomID, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Rooms", za0001, "RoomID")
							return
						}
					case "cmds":
						var zb0004 uint32
						zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Rooms", za0001, "Cmds")
							return
						}
						if cap(z.Rooms[za0001].Cmds) >= int(zb0004) {
							z.Rooms[za0001].Cmds = (z.Rooms[za0001].Cmds)[:zb0004]
						} else {
							z.Rooms[za0001].Cmds = make([]string, zb0004)
						}
						for za0002 := range z.Rooms[za0001].Cmds {
							z.Rooms[za0001].Cmds[za0002], bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Rooms", za0001, "Cmds", za0002)
								return
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Rooms", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgSubscribeReq) Msgsize() (s int) {
	s = 1 + 4 + msgp.Uint32Size + 4 + msgp.BytesPrefixSize + len(z.SubscriberSecret) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Rooms {
		s += 1 + 5 + msgp.IntSize + 5 + msgp.ArrayHeaderSize
		for za0002 := range z.Rooms[za0001].Cmds {
			s += msgp.StringPrefixSize + len(z.Rooms[za0001].Cmds[za0002])
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgSubscribeRoom) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "room":
			z.RoomID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RoomID")
				return
			}
		case "cmds":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cmds")
				return
			}
			if cap(z.Cmds) >= int(zb0002) {
				z.Cmds = (z.Cmds)[:zb0002]
			} else {
				z.Cmds = make([]string, zb0002)
			}
			for za0001 := range z.Cmds {
				z.Cmds[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Cmds", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgSubscribeRoom) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "room"
	err = en.Append(0x82, 0xa4, 0x72, 0x6f, 0x6f, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RoomID)
	if err != nil {
		err = msgp.WrapError(err, "RoomID")
		return
	}
	// write "cmds"
	err = en.Append(0xa4, 0x63, 0x6d, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Cmds)))
	if err != nil {
		err = msgp.WrapError(err, "Cmds")
		return
	}
	for za0001 := range z.Cmds {
		err = en.WriteString(z.Cmds[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Cmds", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MsgSubscribeRoom) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "room"
	o = append(o, 0x82, 0xa4, 0x72, 0x6f, 0x6f, 0x6d)
	o = msgp.AppendInt(o, z.RoomID)
	// string "cmds"
	o = append(o, 0xa4, 0x63, 0x6d, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Cmds)))
	for za0001 := range z.Cmds {
		o = msgp.AppendString(o, z.Cmds[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgSubscribeRoom) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "room":
			z.RoomID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RoomID")
				return
			}
		case "cmds":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cmds")
				return
			}
			if cap(z.Cmds) >= int(zb0002) {
				z.Cmds = (z.Cmds)[:zb0002]
			} else {
				z.Cmds = make([]string, zb0002)
			}
			for za0001 := range z.Cmds {
				z.Cmds[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cmds", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgSubscribeRoom) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Cmds {
		s += msgp.StringPrefixSize + len(z.Cmds[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgSubscribeRsp) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ok":
			z.Ok, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Ok")
				return
			}
		case "msg":
			z.Msg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MsgSubscribeRsp) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ok"
	err = en.Append(0x82, 0xa2, 0x6f, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Ok)
	if err != nil {
		err = msgp.WrapError(err, "Ok")
		return
	}
	// write "msg"
	err = en.Append(0xa3, 0x6d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Msg)
	if err != nil {
		err = msgp.WrapError(err, "Msg")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MsgSubscribeRsp) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ok"
	o = append(o, 0x82, 0xa2, 0x6f, 0x6b)
	o = msgp.AppendBool(o, z.Ok)
	// string "msg"
	o = append(o, 0xa3, 0x6d, 0x73, 0x67)
	o = msgp.AppendString(o, z.Msg)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MsgSubscribeRsp) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ok":
			z.Ok, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ok")
				return
			}
		case "msg":
			z.Msg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Msg")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MsgSubscribeRsp) Msgsize() (s int) {
	s = 1 + 3 + msgp.BoolSize + 4 + msgp.StringPrefixSize + len(z.Msg)
	return
}
